{"version":3,"file":"books.controller.js","sourceRoot":"","sources":["../../../app/controllers/books.controller.ts"],"names":[],"mappings":";;AACA,qCAAoD;AACpD,8BAAiC;AAGjC,MAAM,MAAM,GAAW,gBAAM,EAAE,CAAC;AAKhC,MAAM,CAAC,GAAG,CAAC,GAAG,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IAC5C,OAAO,aAAQ,CAAC,WAAW,EAAE;SACxB,IAAI,CAAC,QAAQ,CAAC,EAAE;QACb,GAAG,CAAC,SAAS,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;QAClD,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC;AAEH,MAAM,CAAC,IAAI,CAAC,MAAM,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IAChD,MAAM,IAAI,GAAG,GAAG,CAAC,IAAI,CAAC;IAEtB,aAAQ,CAAC,aAAa,CAAC,IAAI,CAAC;SACvB,IAAI,CAAC,GAAG,EAAE,CACP,aAAQ,CAAC,WAAW,EAAE;SACjB,IAAI,CAAC,QAAQ,CAAC,EAAE;QACb,GAAG,CAAC,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;QAC/C,GAAG,CAAC,MAAM,CAAC,8BAA8B,EAAE,cAAc,CAAC,CAAC;QAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,IAAI,EAAE,QAAQ,EAAE,CAAC,CAAC;IAC7C,CAAC,CAAC;SACD,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CACvD;SACA,KAAK,CAAC,KAAK,CAAC,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,CAAC,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC;AACzD,CAAC,CAAC,CAAC;AACH,MAAM,CAAC,OAAO,CAAC,IAAI,EAAE,CAAC,GAAY,EAAE,GAAa,EAAE,EAAE;IACjD,aAAQ,CAAC,WAAW,EAAE,CAAC,IAAI,CAAC,QAAQ,CAAC,EAAE;QACnC,GAAG,CAAC,MAAM,CAAC,6BAA6B,EAAE,GAAG,CAAC,CAAC;QAC/C,GAAG,CAAC,MAAM,CAAC,8BAA8B,EAAE,cAAc,CAAC,CAAC;QAC3D,GAAG,CAAC,MAAM,CAAC,GAAG,CAAC,CAAC,IAAI,EAAE,CAAC;IAC3B,CAAC,CAAC,CAAC;AACP,CAAC,CAAC,CAAC;AAGU,QAAA,eAAe,GAAW,MAAM,CAAC","sourcesContent":["// Import only what we need from express\r\nimport { Router, Request, Response } from 'express';\r\nimport { SourceDB } from '../db';\r\n\r\n// Assign router to the express.Router() instance\r\nconst router: Router = Router();\r\n\r\n// The / here corresponds to the route that the WelcomeController\r\n// is mounted on in the server.ts file.\r\n// In this case it's /welcome\r\nrouter.get('/', (req: Request, res: Response) => {\r\n    return SourceDB.getAllBooks()\r\n        .then(entities => {\r\n            res.setHeader('Access-Control-Allow-Origin', '*');\r\n            res.status(200).send({ data: entities });\r\n        })\r\n        .catch(error => res.status(500).send({ error }));\r\n});\r\n\r\nrouter.post('/add', (req: Request, res: Response) => {\r\n    const book = req.body;\r\n\r\n    SourceDB.insertNewBook(book)\r\n        .then(() =>\r\n            SourceDB.getAllBooks()\r\n                .then(entities => {\r\n                    res.append('Access-Control-Allow-Origin', '*');\r\n                    res.append('Access-Control-Allow-Headers', 'Content-Type');\r\n                    res.status(200).send({ data: entities });\r\n                })\r\n                .catch(error => res.status(500).send({ error })),\r\n        )\r\n        .catch(error => res.status(500).send({ error }));\r\n});\r\nrouter.options('/*', (req: Request, res: Response) => {\r\n    SourceDB.getAllBooks().then(entities => {\r\n        res.append('Access-Control-Allow-Origin', '*');\r\n        res.append('Access-Control-Allow-Headers', 'Content-Type');\r\n        res.status(200).send();\r\n    });\r\n});\r\n\r\n// Export the express.Router() instance to be used by server.ts\r\nexport const BooksController: Router = router;\r\n"]}